/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/cell-viz/src/SdrDrawing.js":
/*!*************************************************!*\
  !*** ./node_modules/cell-viz/src/SdrDrawing.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* From http://stackoverflow.com/questions/7128675/from-green-to-red-color-depend-on-percentage */\nfunction getGreenToRed(percent) {\n    let r, g;\n    percent = 100 - percent;\n    r = percent < 50 ? 255 : Math.floor(255 - (percent * 2 - 100) * 255 / 100);\n    g = percent > 50 ? 255 : Math.floor(percent * 2 * 255 / 100);\n    return rgbToHex(r, g, 0);\n}\n\n/* From http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb */\nfunction rgbToHex(r, g, b) {\n    return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n}\n\nfunction datumIsOn(d) {\n    return d !== null && d > 0;\n}\n// function datumIsConnected(d, threshold) {\n//     return d !== null && threshold !== null && d > threshold\n// }\n\nlet defaultOpts = {\n    width: 400,\n    height: 400,\n    threshold: undefined,\n    gradientFill: false,\n    onColor: 'skyblue',\n    offColor: 'white',\n    connectionColor: 'royalblue',\n    lineColor: 'teal'\n};\n\nfunction SdrDrawing(permanences, element) {\n    this.permanences = permanences;\n    this.el = element;\n    this.$drawing = undefined;\n}\n\nSdrDrawing.prototype._snapDrawOptionsToBox = function (opts) {\n    let w = opts.width;\n    let h = opts.height;\n    let area = w * h;\n    let numBoxes = this.permanences.length;\n    let cellSize = Math.floor(Math.sqrt(area / numBoxes) * .95);\n    let repeatX = Math.floor(w / cellSize);\n    opts.cellSize = cellSize;\n    opts.rowLength = repeatX;\n    return opts;\n};\n\nSdrDrawing.prototype.onCell = function (eventName, fn) {\n    this.$drawing.selectAll('rect.bit').on(eventName, fn);\n    return this;\n};\n\nSdrDrawing.prototype.onConnection = function (eventName, fn) {\n    this.$drawing.selectAll('circle.connection').on(eventName, fn);\n    return this;\n};\n\nSdrDrawing.prototype.drawLinesTo = function (coords) {\n    let data = this.$drawing.selectAll('rect.bit').data();\n    let opts = this.drawOptions;\n\n    function renderLines(ls) {\n        ls.attr('class', 'line').attr('visibility', (d, i) => {\n            if (datumIsOn(d)) return 'visible';else return 'hidden';\n        }).attr('stroke', opts.lineColor).attr('stroke-width', 1.0).attr('x1', function (d, i) {\n            let offset = i % opts.rowLength;\n            return offset * opts.cellSize + opts.cellSize / 2;\n        }).attr('y1', function (d, i) {\n            let offset = Math.floor(i / opts.rowLength);\n            return offset * opts.cellSize + opts.cellSize / 2;\n        }).attr('x2', coords[0]).attr('y2', coords[1]);\n    }\n\n    // Update\n    let lines = this.$drawing.selectAll('line.line').data(data);\n    renderLines(lines);\n\n    // Enter\n    let newLines = lines.enter().append('line');\n    renderLines(newLines);\n\n    // Exit\n    lines.exit().remove();\n\n    return this;\n};\n\nSdrDrawing.prototype.draw = function (options) {\n    let perms = this.permanences;\n    let opts = this._snapDrawOptionsToBox(Object.assign({}, defaultOpts, options));\n    let threshold = opts.threshold;\n    this.$drawing = d3.select('#' + this.el).attr('width', opts.width).attr('height', opts.height);\n\n    function renderCell(r, c) {\n        r.attr('class', 'bit').attr('fill', d => {\n            if (d === null) return opts.offColor;\n            if (d > 0) {\n                if (opts.gradientFill) return '#' + getGreenToRed(d * 100);else return opts.onColor;\n            }\n            return opts.offColor;\n        }).attr('stroke', 'darkgrey').attr('stroke-width', 0.5).attr('fill-opacity', 1).attr('x', function (d, i) {\n            let offset = i % opts.rowLength;\n            return offset * opts.cellSize;\n        }).attr('y', function (d, i) {\n            let offset = Math.floor(i / opts.rowLength);\n            return offset * opts.cellSize;\n        }).attr('width', opts.cellSize).attr('height', opts.cellSize);\n\n        if (c) {\n            c.attr('class', 'connection').attr('fill', opts.connectionColor).attr('cx', function (d) {\n                let i = d.index;\n                let offset = i % opts.rowLength;\n                return offset * opts.cellSize + opts.cellSize / 2;\n            }).attr('cy', function (d) {\n                let i = d.index;\n                let offset = Math.floor(i / opts.rowLength);\n                return offset * opts.cellSize + opts.cellSize / 2;\n            }).attr('r', opts.cellSize / 4);\n        }\n    }\n\n    // Update\n    let rects = this.$drawing.selectAll('rect.bit').data(perms);\n    let circs;\n    // Only create circles if there is a threshold defined for connections.\n    if (threshold !== undefined) {\n        let permObjs = perms.map((p, i) => {\n            return {\n                index: i,\n                permanence: p\n            };\n        }).filter(p => {\n            return p.permanence !== null && p.permanence > threshold;\n        });\n        circs = this.$drawing.selectAll('circle.connection').data(permObjs);\n    }\n    renderCell(rects, circs);\n\n    // Enter\n    let newRects = rects.enter().append('rect');\n    let newCircs;\n    if (threshold !== undefined) {\n        newCircs = circs.enter().append('circle');\n    }\n    renderCell(newRects, newCircs);\n\n    // Exit\n    rects.exit().remove();\n    if (threshold !== undefined) {\n        circs.exit().remove();\n    }\n\n    // Stash the draw options we used\n    this.drawOptions = opts;\n\n    return this;\n};\n\nmodule.exports = SdrDrawing;\n\n//# sourceURL=webpack:///./node_modules/cell-viz/src/SdrDrawing.js?");

/***/ }),

/***/ "./node_modules/cell-viz/src/SdrUtils.js":
/*!***********************************************!*\
  !*** ./node_modules/cell-viz/src/SdrUtils.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("let DEFAULT_SPARSITY = 0.02;\n\n/***** Private TOOLS *****/\n\n// a tool to loop x times\nfunction times(count, fn) {\n    for (let i = 0; i < count; i++) {\n        fn(i);\n    }\n}\n\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction flip(bit) {\n    if (bit === 0) return 1;\n    return 0;\n}\n\nfunction overflowSafeUniqueness(n, w) {\n    let bigN = math.bignumber(n);\n    let bigW = math.bignumber(w);\n\n    let nf = math.factorial(bigN);\n    let wf = math.factorial(bigW);\n    let nwf = math.factorial(math.subtract(bigN, bigW));\n\n    return math.divide(nf, math.multiply(wf, nwf));\n}\n\nfunction closeEnoughSparsity(a, b) {\n    let diff = Math.abs(a - b);\n    // Close enough if within one percent.\n    return diff <= 0.01;\n}\n\n/***** PUBLIC functions start here *****/\n\n/*********\n CREATE\n*********/\n\nfunction getRandom(n, w) {\n    let out = [];\n    let randomIndex;\n    let sparsity;\n\n    if (w === undefined) {\n        w = n * DEFAULT_SPARSITY;\n    }\n\n    sparsity = w / n;\n\n    // Fill array with zeros.\n    while (out.length < n) {\n        out.push(0);\n    }\n    // If not sparse enough, randomly flip 0 bits to 1.\n    while (population(out) / n < sparsity) {\n        // Make a random 0 bit into a 1.\n        randomIndex = getRandomInt(0, n);\n        if (out[randomIndex] === 0) {\n            out[randomIndex] = 1;\n        }\n    }\n\n    return out;\n}\n\nfunction getEmpty(n) {\n    let out = [];\n\n    times(n, function () {\n        out.push(0);\n    });\n    return out;\n}\n\n/*********\n INSPECT\n *********/\n\nfunction getActiveBits(sdr) {\n    let active = [];\n    sdr.forEach((bit, i) => {\n        if (bit === 1) active.push(i);\n    });\n    return active;\n}\n\nfunction getInactiveBits(sdr) {\n    let inactive = [];\n    sdr.forEach((bit, i) => {\n        if (bit === 0) inactive.push(i);\n    });\n    return inactive;\n}\n\n// This works on arrays of 0/1 and floats (assuming any value > = converts to 1).\nfunction population(sdr) {\n    return sdr.reduce(function (sum, n) {\n        let val = 0;\n        if (n > 0) val = 1;\n        return sum + val;\n    }, 0);\n}\n\nfunction sparsity(sdr) {\n    let onBits = sdr.filter(bit => {\n        return bit === 1;\n    }).length;\n    return onBits / sdr.length;\n}\nlet density = sparsity;\n\n/*********\n UPDATE\n *********/\n\n// Flips every bit.\nfunction invert(sdr) {\n    return sdr.map(bit => {\n        if (bit === 0) return 1;\n        return 0;\n    });\n}\n\nfunction adjustTo(sdr, targetDensity) {\n    let out = sdr.slice();\n\n    let n = sdr.length;\n    let currentDensity = density(sdr);\n    let diff = targetDensity - currentDensity;\n    let diffBits = Math.abs(parseInt(diff * n));\n    let onBits = getActiveBits(sdr);\n    let offBits = getInactiveBits(sdr);\n\n    // adjust by turning bits on\n    let bitType = 1;\n    let targetIndices = offBits;\n    // adjust by turning bits off\n    if (targetDensity < currentDensity) {\n        bitType = 0;\n        targetIndices = onBits;\n    }\n\n    for (let i = 0; i < diffBits; i++) {\n        let toFlip = targetIndices.splice(getRandomInt(0, targetIndices.length - 1), 1)[0];\n        out[toFlip] = bitType;\n    }\n\n    return out;\n}\n\n// Adds a percent noise by turning on X percent of the off bits and\n// turning off X percent of the on bits.\nfunction addNoise(sdr, percentNoise) {\n    // The noiseLevel will be the number of total bits to flip.\n    let noiseLevel = Math.floor(population(sdr) * percentNoise);\n    return this.addBitNoise(sdr, noiseLevel);\n}\n\nfunction addBitNoise(sdr, noisyBits) {\n    let noisy = [];\n    let activeBits = getActiveBits(sdr);\n    let inactiveBits = getInactiveBits(sdr);\n    let toFlip = [];\n    // Populate the indices of the bits we want to flip with noise.\n    times(noisyBits, function () {\n        toFlip.push(activeBits.splice(Math.random(activeBits.length - 1), 1)[0]);\n        toFlip.push(inactiveBits.splice(Math.random(inactiveBits.length - 1), 1)[0]);\n    });\n    // Flip them bits into a new array output.\n    sdr.forEach((bit, i) => {\n        let newBit = bit;\n        if (toFlip.indexOf(i) >= 0) {\n            newBit = flip(bit);\n        }\n        noisy.push(newBit);\n    });\n    return noisy;\n}\n\nmodule.exports = {\n    getRandom: getRandom,\n    getEmpty: getEmpty,\n    getActiveBits: getActiveBits,\n    getInactiveBits: getInactiveBits,\n    population: population,\n    sparsity: sparsity,\n    density: density,\n    invert: invert,\n    addNoise: addNoise,\n    addBitNoise: addBitNoise,\n    adjustTo: adjustTo\n};\n\n//# sourceURL=webpack:///./node_modules/cell-viz/src/SdrUtils.js?");

/***/ }),

/***/ "./node_modules/javascript-data-store/src/jsds.js":
/*!********************************************************!*\
  !*** ./node_modules/javascript-data-store/src/jsds.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\n * Copyright (c) 2010 Matthew A. Taylor\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nvar REGEX_DOT_G = /\\./g,\n    BSLASH_DOT = '\\.',\n    REGEX_STAR_G = /\\*/g,\n    ID_LENGTH = 16,\n\n// static export\nJSDS,\n\n// private props\nrandoms = [],\n\n// private functions\nstoreIt,\n    update,\n    mergeArraysIntoSet,\n    arrayContains,\n    arrayRemoveItem,\n    fire,\n    listenerApplies,\n    removeListener,\n    getCompleteKey,\n    pullOutKeys,\n    toRegex,\n    valueMatchesKeyString,\n    clone,\n    getValue,\n    getRandomId,\n    generateRandomId;\n\n/*************************/\n/* The JSDataStore Class */\n/*************************/\n\nfunction JSDataStore(id) {\n    // data stores\n    this._s = {};\n    // event listeners\n    this._l = {};\n    this.id = id;\n}\n\nJSDataStore.prototype = {\n\n    /**\n     * Stores data\n     *\n     * key {String}: the key to be used to store the data. The same key can be used to retrieve\n     *               the data\n     * val {Object}: Any value to be stored in the store\n     * opts {Object} (optional): options to be used when storing data:\n     *                          'update': if true, values already existing within objects and\n     *                                    arrays will not be clobbered\n     * returns {Object}: The last value stored within specified key or undefined\n     *\n     * (fires 'store' event)\n     */\n    set: function (key, val, opts /*optional*/) {\n        var result;\n        opts = opts || { update: false };\n        fire.call(this, 'set', {\n            key: key,\n            value: val,\n            id: this.id,\n            when: 'before',\n            args: Array.prototype.slice.call(arguments, 0, arguments.length)\n        });\n        result = storeIt(this._s, key, opts, val);\n        fire.call(this, 'set', {\n            key: key,\n            value: val,\n            id: this.id,\n            when: 'after',\n            result: this.get(key, { quiet: true })\n        });\n        return result;\n    },\n\n    /**\n     * Gets data back out of store\n     *\n     * key {String}: the key of the data you want back\n     * returns {Object}: the data or undefined if key doesn't exist\n     *\n     * (fires 'get' event)\n     */\n    get: function (key) {\n        var s = this._s,\n            keys,\n            i = 0,\n            j = 0,\n            opts,\n            result,\n            splitKeys,\n            args = Array.prototype.slice.call(arguments, 0, arguments.length);\n\n        opts = args[args.length - 1];\n        if (typeof opts === 'string') {\n            opts = {};\n        } else {\n            args.pop();\n        }\n\n        if (!opts.quiet) {\n            fire.call(this, 'get', {\n                key: key,\n                when: 'before',\n                args: args\n            });\n        }\n\n        if (args.length === 1 && key.indexOf(BSLASH_DOT) < 0) {\n            result = s[key];\n        } else {\n            if (args.length > 1) {\n                keys = [];\n                for (i = 0; i < args.length; i++) {\n                    if (args[i].indexOf(BSLASH_DOT) > -1) {\n                        splitKeys = args[i].split(BSLASH_DOT);\n                        for (j = 0; j < splitKeys.length; j++) {\n                            keys.push(splitKeys[j]);\n                        }\n                    } else {\n                        keys.push(args[i]);\n                    }\n                }\n            } else if (key.indexOf(BSLASH_DOT) > -1) {\n                keys = key.split(BSLASH_DOT);\n            }\n\n            result = getValue(s, keys);\n        }\n\n        if (!opts.quiet) {\n            fire.call(this, 'get', {\n                key: key,\n                value: result,\n                when: 'after',\n                result: result\n            });\n        }\n        return result;\n    },\n\n    /**\n     * Adds a listener to this store. The listener will be executed when an event of\n     * the specified type is emitted and all the conditions defined in the parameters\n     * are met.\n     *\n     * type {String}: the type of event to listen for ('store', 'get', 'clear', etc.)\n     * options {object}: an object that contains one or more of the following configurations:\n     *                  'callback': the function to be executed\n     *                  'scope': the scope object for the callback execution\n     *                  'key': the storage key to listen for. If specified only stores into this key will\n     *                          cause callback to be executed\n     *                  'when': 'before' or 'after' (default is 'after')\n     */\n    on: function (type, opts) {\n        var me = this,\n            cbid = getRandomId(),\n            key = opts.key,\n            fn = opts.callback,\n            scope = opts.scope || this,\n            when = opts.when || 'after';\n        if (!this._l[type]) {\n            this._l[type] = [];\n        }\n        this._l[type].push({ id: cbid, callback: fn, scope: scope, key: key, when: when });\n        return {\n            id: cbid,\n            remove: function () {\n                removeListener(me._l[type], cbid);\n            }\n        };\n    },\n\n    before: function (type, key, cb, scpe) {\n        var callback = cb,\n            scope = scpe;\n        // key is optional\n        if (typeof key === 'function') {\n            callback = key;\n            scope = cb;\n            key = undefined;\n        }\n        return this.on(type, {\n            callback: callback,\n            key: key,\n            when: 'before',\n            scope: scope\n        });\n    },\n\n    after: function (type, key, cb, scpe) {\n        var callback = cb,\n            scope = scpe;\n        // key is optional\n        if (typeof key === 'function') {\n            callback = key;\n            scope = cb;\n            key = undefined;\n        }\n        return this.on(type, {\n            callback: callback,\n            key: key,\n            when: 'after',\n            scope: scope\n        });\n    },\n\n    /**\n     * Removes all data from store\n     *\n     * (fires 'clear' event)\n     */\n    clear: function () {\n        this._s = {};\n        fire.call(this, 'clear');\n    },\n\n    /**\n     * Removes all internal references to this data store. Note that to entirely release\n     * store object for garbage collection, you must also set any local references to the\n     * store to null!\n     *\n     * (fires 'remove' and 'clear' events)\n     */\n    remove: function () {\n        var ltype, optsArray, opts, i;\n        this.clear();\n        delete JSDS._stores[this.id];\n        arrayRemoveItem(randoms, this.id);\n        fire.call(this, 'remove');\n    }\n};\n\n/*************************/\n/* Global JSDS namespace */\n/*************************/\n\nJSDS = {\n\n    _stores: {},\n\n    /**\n     * Create a new data store object. If no id is specified, a random id will be\n     * generated.\n     *\n     * id {String} (optional): to identify this store for events and later retrieval\n     */\n    create: function (id) {\n\n        id = id || getRandomId();\n\n        if (this._stores[id]) {\n            throw new Error('Cannot overwrite existing data store \"' + id + '\"!');\n        }\n\n        this._stores[id] = new JSDataStore(id);\n\n        return this._stores[id];\n    },\n\n    /**\n     * Retrieves an existing data store object by id\n     *\n     * id {String}: the id of the store to retrieve\n     * returns {JSDataStore} the data store\n     */\n    get: function (id) {\n        return this._stores[id];\n    },\n\n    /**\n     * Removes all data stores objects. Specifically, each JSDataStore object's remove()\n     * method is called, and all local references to each are deleted.\n     */\n    clear: function () {\n        var storeId;\n        for (storeId in this._stores) {\n            if (this._stores.hasOwnProperty(storeId)) {\n                this._stores[storeId].remove();\n                delete this._stores[storeId];\n            }\n        }\n        this._stores = {};\n    },\n\n    /**\n     * Returns a count of the existing data stores in memory\n     */\n    count: function () {\n        var cnt = 0,\n            p;\n        for (p in this._stores) {\n            if (this._stores.hasOwnProperty(p)) {\n                cnt++;\n            }\n        }\n        return cnt;\n    },\n\n    /**\n     * Returns a list of ids [String] for all data store obects in memory\n     */\n    ids: function () {\n        var id,\n            ids = [];\n        for (id in this._stores) {\n            if (this._stores.hasOwnProperty(id)) {\n                ids.push(id);\n            }\n        }\n        return ids;\n    }\n};\n\n/*****************/\n/* PRIVATE STUFF */\n/*****************/\n\n// recursive store function\nstoreIt = function (store, key, opts, val, oldVal /*optional*/) {\n    var result, keys, oldKey;\n    if (key.indexOf(BSLASH_DOT) >= 0) {\n        keys = key.split('.');\n        oldVal = store[keys[0]] ? clone(store[keys[0]]) : undefined;\n        oldKey = keys.shift();\n        if (store[oldKey] === undefined) {\n            store[oldKey] = {};\n        }\n        return storeIt(store[oldKey], keys.join('.'), opts, val, oldVal);\n    }\n    result = oldVal ? oldVal[key] : store[key];\n    // if this is an update, and there is an old value to update\n    if (opts.update) {\n        update(store, val, key);\n    }\n    // if not an update, just overwrite the old value\n    else {\n            store[key] = val;\n        }\n    return result;\n};\n\n// recursive update function used to overwrite values within the store without\n// clobbering properties of objects\nupdate = function (store, val, key) {\n    var vprop;\n    if (typeof val !== 'object' || val instanceof Array) {\n        if (store[key] && val instanceof Array) {\n            mergeArraysIntoSet(store[key], val);\n        } else {\n            store[key] = val;\n        }\n    } else {\n        for (vprop in val) {\n            if (val.hasOwnProperty(vprop)) {\n                if (!store[key]) {\n                    store[key] = {};\n                }\n                if (store[key].hasOwnProperty(vprop)) {\n                    update(store[key], val[vprop], vprop);\n                } else {\n                    store[key][vprop] = val[vprop];\n                }\n            }\n        }\n    }\n};\n\n// merge two arrays without duplicate values\nmergeArraysIntoSet = function (lhs, rhs) {\n    var i = 0;\n    for (; i < rhs.length; i++) {\n        if (!arrayContains(lhs, rhs[i])) {\n            lhs.push(rhs[i]);\n        }\n    }\n};\n\n// internal utility function\narrayContains = function (arr, val, comparator /* optional */) {\n    var i = 0;\n    comparator = comparator || function (lhs, rhs) {\n        return lhs === rhs;\n    };\n    for (; i < arr.length; i++) {\n        if (comparator(arr[i], val)) {\n            return true;\n        }\n    }\n    return false;\n};\n\narrayRemoveItem = function (arr, item) {\n    var i, needle;\n    for (i = 0; i < arr.length; i++) {\n        if (arr[i] === item) {\n            needle = i;\n            break;\n        }\n    }\n    if (needle) {\n        arr.splice(needle, 1);\n    }\n};\n\n// fire an event of 'type' with included arguments to be passed to listeners functions\n// WARNING: this function must be invoked as fire.call(scope, type, args) because it uses 'this'.\n// The reason is so this function is not publicly exposed on JSDS instances\nfire = function (type, fireOptions) {\n    var i,\n        opts,\n        scope,\n        listeners,\n        pulledKeys,\n        listeners = this._l[type] || [];\n\n    fireOptions = fireOptions || {};\n\n    if (listeners.length) {\n        for (i = 0; i < listeners.length; i++) {\n            opts = listeners[i];\n            if (listenerApplies.call(this, opts, fireOptions)) {\n                scope = opts.scope || this;\n                if (opts.key && fireOptions) {\n                    if (opts.key.indexOf('*') >= 0) {\n                        pulledKeys = pullOutKeys(fireOptions.value);\n                        fireOptions.value = {};\n                        fireOptions.value.key = fireOptions.key + pulledKeys;\n                        fireOptions.value.value = getValue(this._s, fireOptions.value.key.split('.'));\n                    } else {\n                        fireOptions.value = getValue(this._s, opts.key.split('.'));\n                    }\n                }\n                if (fireOptions.args) {\n                    opts.callback.apply(scope, fireOptions.args);\n                } else if (fireOptions.result) {\n                    opts.callback.call(scope, fireOptions.result);\n                } else {\n                    opts.callback.call(scope, fireOptions.result);\n                }\n            }\n        }\n    }\n};\n\n// WARNING: this function must be invoked as listenerApplies.call(scope, listener, crit) because it uses 'this'.\n// The reason is so this function is not publicly exposed on JSDS instances\nlistenerApplies = function (listener, crit) {\n    var result = false,\n        last,\n        sub,\n        k,\n        replacedKey,\n        breakout = false;\n    if (listener.when && crit.when) {\n        if (listener.when !== crit.when) {\n            return false;\n        }\n    }\n    if (!listener.key || !crit) {\n        return true;\n    }\n    if (!crit.key || crit.key.match(toRegex(listener.key))) {\n        return true;\n    }\n    last = crit.key.length;\n    while (!breakout) {\n        sub = crit.key.substr(0, last);\n        last = sub.lastIndexOf(BSLASH_DOT);\n        if (last < 0) {\n            k = sub;\n            breakout = true;\n        } else {\n            k = sub.substr(0, last);\n        }\n        if (listener.key.indexOf('*') === 0) {\n            return valueMatchesKeyString(crit.value, listener.key.replace(/\\*/, crit.key).substr(crit.key.length + 1));\n        } else if (listener.key.indexOf('*') > 0) {\n            replacedKey = getCompleteKey(crit);\n            return toRegex(replacedKey).match(listener.key);\n        }\n        return valueMatchesKeyString(crit.value, listener.key.substr(crit.key.length + 1));\n    }\n    return result;\n};\n\nremoveListener = function (listeners, id) {\n    var i, l, needle;\n    for (i = 0; i < listeners.length; i++) {\n        l = listeners[i];\n        if (l.id && l.id === id) {\n            needle = i;\n            break;\n        }\n    }\n    if (typeof needle !== 'undefined') {\n        listeners.splice(needle, 1);\n    }\n};\n\ngetCompleteKey = function (o) {\n    var val = o.value,\n        key = o.key;\n    return key + pullOutKeys(val);\n};\n\npullOutKeys = function (v) {\n    var p,\n        res = '';\n    for (p in v) {\n        if (v.hasOwnProperty(p)) {\n            res += '.' + p;\n            if (typeof v[p] === 'object' && !(v[p] instanceof Array)) {\n                res += pullOutKeys(v[p]);\n            }\n        }\n    }\n    return res;\n};\n\ntoRegex = function (s) {\n    return s.replace(REGEX_DOT_G, '\\\\.').replace(REGEX_STAR_G, '\\.*');\n};\n\nvalueMatchesKeyString = function (val, key) {\n    var p,\n        i = 0,\n        keys = key.split('.');\n    for (p in val) {\n        if (val.hasOwnProperty(p)) {\n            if (keys[i] === '*' || p === keys[i]) {\n                if (typeof val[p] === 'object' && !(val[p] instanceof Array)) {\n                    return valueMatchesKeyString(val[p], keys.slice(i + 1).join('.'));\n                } else {\n                    return true;\n                }\n            }\n        }\n        i++;\n    }\n    return false;\n};\n\n// used to copy branches within the store. Object and array friendly\nclone = function (val) {\n    var newObj, i, prop;\n    if (val instanceof Array) {\n        newObj = [];\n        for (i = 0; i < val.length; i++) {\n            newObj[i] = clone(val[i]);\n        }\n    } else if (typeof val === 'object') {\n        newObj = {};\n        for (prop in val) {\n            if (val.hasOwnProperty(prop)) {\n                newObj[prop] = clone(val[prop]);\n            }\n        }\n    } else {\n        return val;\n    }\n    return newObj;\n};\n\n// returns a value from a store given an array of keys that is meant to describe depth\n// within the storage tree\ngetValue = function (store, keys) {\n    var key = keys.shift(),\n        endKey,\n        arrResult,\n        p,\n        keysClone;\n    if (key === '*') {\n        arrResult = [];\n        for (p in store) {\n            if (store.hasOwnProperty(p)) {\n                keysClone = clone(keys);\n                arrResult.push(getValue(store[p], keysClone));\n            }\n        }\n        return arrResult;\n    }\n    if (keys[0] && store[key] && (store[key][keys[0]] || keys[0] === '*')) {\n        return getValue(store[key], keys);\n    } else {\n        if (keys.length) {\n            endKey = keys[0];\n        } else {\n            endKey = key;\n        }\n        return store[endKey];\n    }\n};\n\ngenerateRandomId = function (length) {\n    var text = \"\",\n        i,\n        possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    for (i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n};\n\ngetRandomId = function () {\n    var id = generateRandomId(ID_LENGTH);\n    // no duplicate ids allowed\n    while (arrayContains(randoms, id)) {\n        id = generateRandomId(ID_LENGTH);\n    }\n    randoms.push(id);\n    return id;\n};\n\nmodule.exports = JSDS;\n\n//# sourceURL=webpack:///./node_modules/javascript-data-store/src/jsds.js?");

/***/ }),

/***/ "./src/widgets/input-space/index.js":
/*!******************************************!*\
  !*** ./src/widgets/input-space/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("window.BHTMS = {\n    miniColumnPotentialPools: __webpack_require__(/*! ./potentialPools */ \"./src/widgets/input-space/potentialPools.js\"),\n    miniColumnInitialPerms: __webpack_require__(/*! ./initialPerms */ \"./src/widgets/input-space/initialPerms.js\")\n};\n\n//# sourceURL=webpack:///./src/widgets/input-space/index.js?");

/***/ }),

/***/ "./src/widgets/input-space/initialPerms.js":
/*!*************************************************!*\
  !*** ./src/widgets/input-space/initialPerms.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let SdrUtils = __webpack_require__(/*! SdrUtils */ \"./node_modules/cell-viz/src/SdrUtils.js\");\nlet SdrDrawing = __webpack_require__(/*! SdrDrawing */ \"./node_modules/cell-viz/src/SdrDrawing.js\");\nlet JSDS = __webpack_require__(/*! JSDS */ \"./node_modules/javascript-data-store/src/jsds.js\");\nlet utils = __webpack_require__(/*! ../utils */ \"./src/widgets/utils.js\");\nlet html = __webpack_require__(/*! ./initialPerms.tmpl.html */ \"./src/widgets/input-space/initialPerms.tmpl.html\");\n\nmodule.exports = elementId => {\n\n    let jsds = JSDS.get('spatial-pooling');\n\n    utils.loadHtml(html.default, elementId, () => {\n        console.log(\"Running %s JS\", elementId);\n        let $receptiveFieldPercSlider = $('#receptiveFieldPercSlider');\n        let $receptiveFieldPercDisplay = $('.receptiveFieldPercDisplay');\n        let $connectionThresholdSlider = $('#connectionThresholdSlider');\n        let $connectionThresholdDisplays = $('.connectionThresholdDisplay');\n        let $independentVariablesSlider = $('#independentVariablesSlider');\n        let $independentVariablesDisplays = $('.independentVariablesDisplay');\n        let $distributionCenterSlider = $('#distributionCenterSlider');\n        let $distributionCenterDisplays = $('.distributionCenterDisplay');\n        let $percConnectedDisplay = $('.percConnectedDisplay');\n        let $percConnectedInFieldDisplay = $('.percConnectedInFieldDisplay');\n        let inputSpaceDimensions = 400;\n\n        let currentMousePos = { x: -1, y: -1 };\n        $(document).mousemove(function (event) {\n            currentMousePos.x = event.pageX;\n            currentMousePos.y = event.pageY;\n        });\n\n        let drawOptions = {\n            width: 560,\n            rowLength: 19,\n            gradientFill: true,\n            connectionColor: 'navy'\n        };\n        let $hoverBox = createHoverBox();\n\n        function createHoverBox() {\n            $('<div id=\"hoverBox\" style=\"position:absolute;display:none\">').appendTo('body');\n            return $('#hoverBox');\n        }\n\n        function updatePermanences() {\n            let independentVariables = parseInt($independentVariablesSlider.val());\n            let distributionCenter = parseInt($distributionCenterSlider.val()) / 100;\n            let selectedMiniColumn = jsds.get('selectedMiniColumn');\n            let potentialPool = jsds.get('potentialPools')[selectedMiniColumn];\n            let permanences = d3.range(potentialPool.length).map(d3.randomBates(independentVariables)).map((val, i) => {\n                if (potentialPool[i] === 1) {\n                    return val + distributionCenter - 0.5;\n                } else {\n                    return null;\n                }\n            });\n            jsds.set('permanences', permanences);\n        }\n\n        function updatePercentConnectedDisplay() {\n            let connected = 0;\n            let threshold = parseInt($connectionThresholdSlider.val()) / 100;\n            let permanences = jsds.get('permanences');\n            let receptiveFieldSize = SdrUtils.population(permanences);\n            permanences.forEach(perm => {\n                if (perm >= threshold) connected++;\n            });\n            $percConnectedDisplay.html(Math.round(connected / inputSpaceDimensions * 100));\n            $percConnectedInFieldDisplay.html(Math.round(connected / receptiveFieldSize * 100));\n        }\n\n        function updateDisplays() {\n            let connectionThreshold = parseInt($connectionThresholdSlider.val()) / 100;\n            let permanences = jsds.get('permanences');\n            let sdr = new SdrDrawing(permanences, 'receptiveFieldDemo');\n            drawOptions.threshold = connectionThreshold;\n            sdr.draw(drawOptions);\n            $receptiveFieldPercDisplay.html($receptiveFieldPercSlider.val());\n\n            $connectionThresholdDisplays.html(parseInt($connectionThresholdSlider.val()) / 100);\n            $independentVariablesDisplays.html($independentVariablesSlider.val());\n            $distributionCenterDisplays.html(parseInt($distributionCenterSlider.val()) / 100);\n            sdr.onCell('mouseenter', (perm, index) => {\n                let formattedPerm = Math.round(perm * 100) / 100;\n                $hoverBox.css({\n                    left: currentMousePos.x + 10,\n                    top: currentMousePos.y + 10\n                });\n                $hoverBox.html(formattedPerm).show();\n            }).onCell('mouseout', (perm, index) => {\n                $hoverBox.hide();\n            });\n            updatePercentConnectedDisplay();\n            drawHistogram(permanences);\n        }\n\n        function drawHistogram(rawData) {\n            let formatCount = d3.format(\",.0f\");\n            let data = rawData.filter(d => d !== null);\n\n            let svg = d3.select(\"svg#receptiveFieldHistogram\");\n\n            svg.attr('transform', 'translate(0, -40)');\n\n            let margin = { top: 10, right: 30, bottom: 30, left: 30 },\n                width = +svg.attr(\"width\") - margin.left - margin.right,\n                height = +svg.attr(\"height\") - margin.top - margin.bottom;\n\n            let histGroup = svg.selectAll('g.hist').data([null]);\n\n            histGroup.enter().append('g').attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr('class', 'hist');\n\n            let x = d3.scaleLinear().rangeRound([0, width]);\n\n            let bins = d3.histogram().domain(x.domain()).thresholds(x.ticks(40))(data);\n\n            let y = d3.scaleLinear().domain([0, d3.max(bins, function (d) {\n                return d.length;\n            })]).range([height, 0]);\n\n            function treatBarGroups(barGroups) {\n                barGroups.attr(\"class\", \"bar\").attr(\"transform\", function (d) {\n                    return \"translate(\" + x(d.x0) + \",\" + y(d.length) + \")\";\n                });\n\n                barGroups.selectAll('rect').data([null]).enter().append('rect').attr(\"x\", 1).attr(\"width\", x(bins[0].x1) - x(bins[0].x0) - 1).attr(\"height\", function (d) {\n                    return height - y(d.length);\n                });\n\n                barGroups.selectAll('text').data([null]).enter().append('text').attr(\"dy\", \".75em\").attr(\"y\", 6).attr(\"x\", (x(bins[0].x1) - x(bins[0].x0)) / 2).attr(\"text-anchor\", \"middle\").text(function (d) {\n                    return formatCount(d.length);\n                });\n            }\n\n            // Update bars\n            let barGroups = histGroup.selectAll(\".bar\").data(bins);\n            treatBarGroups(barGroups);\n\n            // Enter bars\n            let newBarGroups = barGroups.enter().append('g');\n            treatBarGroups(newBarGroups);\n\n            // Exit bars\n            barGroups.exit().remove();\n\n            let connectionThreshold = parseInt($connectionThresholdSlider.val()) / 100;\n\n            histGroup.append('line').attr('id', 'connectionThreshold').attr('x1', x(connectionThreshold)).attr('x2', x(connectionThreshold)).attr('y1', 0).attr('y2', 200).attr('stroke', 'red').attr('stroke-width', 4);\n\n            histGroup.append(\"g\").attr(\"class\", \"axis axis--x\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x));\n        }\n\n        function redraw() {\n            updatePermanences();\n            updateDisplays();\n        }\n\n        $connectionThresholdSlider.on('input', updateDisplays);\n        $independentVariablesSlider.on('input', redraw);\n        $distributionCenterSlider.on('input', redraw);\n\n        jsds.after('set', 'selectedMiniColumn', redraw);\n        jsds.after('set', 'potentialPools', redraw);\n\n        redraw();\n    });\n};\n\n//# sourceURL=webpack:///./src/widgets/input-space/initialPerms.js?");

/***/ }),

/***/ "./src/widgets/input-space/initialPerms.tmpl.html":
/*!********************************************************!*\
  !*** ./src/widgets/input-space/initialPerms.tmpl.html ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (`<svg font-family=\"sans-serif\" font-size=\"12pt\" width=\"560\" height=\"400\">\n    <g id=\"receptiveFieldDemo\" transform=\"translate(0,16)\"></g>\n    <text x=\"0\" y=\"12\">one mini-column's receptive field</text>\n</svg>\n<svg id=\"receptiveFieldHistogram\" width=\"560\" height=\"200\" font-family=\"sans-serif\">\n    <text x=\"0\" y=\"18\">distribution of initial permanences</text>\n</svg>\n\n<div style=\"margin-top: -40px\">\n    <div style=\"float:right\">\n        <input type=\"range\" min=\"1\" max=\"100\" value=\"10\" id=\"independentVariablesSlider\">\n        distr. spread: <span class=\"independentVariablesDisplay\"></span>\n    </div>\n    <div>\n        <input type=\"range\" min=\"0\" max=\"100\" value=\"50\" id=\"distributionCenterSlider\">\n        distr. center: <span class=\"distributionCenterDisplay\"></span>\n        <br>\n        <input type=\"range\" min=\"0\" max=\"100\" value=\"50\" id=\"connectionThresholdSlider\">\n        connection threshold: <span class=\"connectionThresholdDisplay\"></span>\n    </div>\n</div>\n\n<div class=\"figure-description clearfix\">\n    <p>\n        The top grid shows the <strong>selected</strong> mini-column's proximal relationship with the input space. Each square is a potential synaptic connection, colored from green to red by how permanent the connection. <strong>Mouse over</strong> the cells to display the scalar permanence value associated with the mini-column's connection to that input cell. A navy circle is shown in the cell if the permanence value is above the connection threshold, and therefore <strong>connected</strong>.\n    </p>\n    <p>\n        The Histogram displays every permanence value for the selected mini-column as frequency counts within bins. You can see how these values are distributed around a center by changing the sliders above. See how changing the connection threshold affects connections across the input space.\n    </p>\n</div>\n`);\n\n//# sourceURL=webpack:///./src/widgets/input-space/initialPerms.tmpl.html?");

/***/ }),

/***/ "./src/widgets/input-space/potentialPools.js":
/*!***************************************************!*\
  !*** ./src/widgets/input-space/potentialPools.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let SdrDrawing = __webpack_require__(/*! SdrDrawing */ \"./node_modules/cell-viz/src/SdrDrawing.js\");\nlet utils = __webpack_require__(/*! ../utils */ \"./src/widgets/utils.js\");\nlet html = __webpack_require__(/*! ./potentialPools.tmpl.html */ \"./src/widgets/input-space/potentialPools.tmpl.html\");\nlet JSDS = __webpack_require__(/*! JSDS */ \"./node_modules/javascript-data-store/src/jsds.js\");\n\nfunction render(elementId) {\n\n    let jsds = JSDS.create('spatial-pooling');\n\n    utils.loadHtml(html.default, elementId, () => {\n\n        let $receptiveFieldPercSlider = $('#receptiveFieldPercSlider');\n        let $receptiveFieldPercDisplay = $('.receptiveFieldPercDisplay');\n        let $inputSpaceSizeSlider = $('#inputSpaceSizeSlider');\n        let $inputSpaceSizeDisplay = $('.inputSpaceSizeDisplay');\n        let $miniColumnCountSlider = $('#miniColumnCountSlider');\n        let $miniColumnCountDisplay = $('.miniColumnCountDisplay');\n\n        let drawOptions = {\n            width: 270,\n            height: 270\n        };\n\n        jsds.set('inputSpaceDimensions', parseInt($inputSpaceSizeSlider.val()));\n        jsds.set('miniColumnCount', parseInt($miniColumnCountSlider.val()));\n        jsds.set('receptiveFieldPerc', parseInt($receptiveFieldPercSlider.val()) / 100);\n\n        function loadRandomPotentialPools() {\n            let inputSpaceDimensions = parseInt($inputSpaceSizeSlider.val());\n            let miniColumnCount = parseInt($miniColumnCountSlider.val());\n            let receptiveFieldPerc = parseInt($receptiveFieldPercSlider.val()) / 100;\n            potentialPools = [];\n            for (let i = 0; i < miniColumnCount; i++) {\n                let pool = [];\n                for (let j = 0; j < inputSpaceDimensions; j++) {\n                    if (Math.random() > receptiveFieldPerc) pool.push(0);else pool.push(1);\n                }\n                potentialPools.push(pool);\n            }\n            let selectedMiniColumn = jsds.get('selectedMiniColumn');\n            if (selectedMiniColumn >= potentialPools.length) {\n                jsds.set('selectedMiniColumn', potentialPools.length - 1);\n            }\n            jsds.set('potentialPools', potentialPools);\n        }\n\n        function updateSelectedMiniColumn(index) {\n            jsds.set('selectedMiniColumn', index);\n        }\n\n        function updateDisplays() {\n            let selectedMiniColumn = jsds.get('selectedMiniColumn');\n            let miniColumnCount = parseInt($miniColumnCountSlider.val());\n            let miniColumnPools = new Array(miniColumnCount);\n            miniColumnPools[selectedMiniColumn] = 1;\n            let miniColumnsDrawing = new SdrDrawing(miniColumnPools, 'miniColumnPools');\n            let mcOpts = Object.assign({}, drawOptions);\n            mcOpts.onColor = 'khaki';\n            miniColumnsDrawing.draw(mcOpts);\n            miniColumnsDrawing.$drawing.attr('transform', 'translate(280)');\n            miniColumnsDrawing.onCell('mouseover', (d, i) => {\n                jsds.set('selectedMiniColumn', i);\n            });\n\n            let pool = jsds.get('potentialPools')[selectedMiniColumn];\n            let poolDrawing = new SdrDrawing(pool, 'inputSpacePools');\n            poolDrawing.draw(drawOptions);\n            $receptiveFieldPercDisplay.html($receptiveFieldPercSlider.val());\n            $inputSpaceSizeDisplay.html($inputSpaceSizeSlider.val());\n            $miniColumnCountDisplay.html($miniColumnCountSlider.val());\n        }\n\n        jsds.set('selectedMiniColumn', 0);\n        jsds.after('set', 'selectedMiniColumn', updateDisplays);\n\n        jsds.after('set', 'potentialPools', updateDisplays);\n\n        loadRandomPotentialPools();\n\n        $('#potentialPoolWidget input').on('input', event => {\n            loadRandomPotentialPools();\n            event.preventDefault();\n            event.stopPropagation();\n        });\n    });\n}\n\nmodule.exports = render;\n\n//# sourceURL=webpack:///./src/widgets/input-space/potentialPools.js?");

/***/ }),

/***/ "./src/widgets/input-space/potentialPools.tmpl.html":
/*!**********************************************************!*\
  !*** ./src/widgets/input-space/potentialPools.tmpl.html ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (`<svg width=\"560px\" height=\"280px\" font-family=\"sans-serif\">\n    <g id=\"miniColumnPools\"></g>\n    <g id=\"inputSpacePools\"></g>\n    <text x=\"0\" y=\"12\" font-size=\"12pt\">\n        input space\n    </text>\n    <text x=\"280\" y=\"12\" font-size=\"12pt\">\n        mini-columns\n    </text>\n</svg>\n\n<div>\n    <div style=\"float:right\">\n        <input type=\"range\" min=\"100\" max=\"600\" value=\"300\" id=\"miniColumnCountSlider\">\n        <span class=\"miniColumnCountDisplay\"></span> mini-columns\n    </div>\n    <div>\n        <input type=\"range\" min=\"100\" max=\"600\" value=\"300\" id=\"inputSpaceSizeSlider\">\n        <span class=\"inputSpaceSizeDisplay\"></span> input bits\n        <br>\n        <input type=\"range\" min=\"0\" max=\"100\" value=\"90\" step=\"5\" id=\"receptiveFieldPercSlider\">\n        <span class=\"receptiveFieldPercDisplay\"></span>% receptive field\n    </div>\n</div>\n\n<div class=\"figure-description clearfix\">\n    <p>\n        To the left is a binary input space, where blue indicates cells that are part of a mini-column's potential pool\n        of proximal connections. To the right, looking down at an array of mini-columns, where only the topmost cell in\n        each can be seen. <strong>Mouse over</strong> the mini-columns to make a selection.</p>\n    <p>\n\n    </p><p>\n        Use the sliders to change sizes or change how large each mini-column's receptive field is.\n    </p>\n</div>\n`);\n\n//# sourceURL=webpack:///./src/widgets/input-space/potentialPools.tmpl.html?");

/***/ }),

/***/ "./src/widgets/utils.js":
/*!******************************!*\
  !*** ./src/widgets/utils.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Loads given html into an element, calls the cb one time when loaded.\nfunction loadHtml(html, elementId, cb) {\n    let $el = $('#' + elementId);\n    $el.one('DOMNodeInserted', () => {\n        cb();\n    });\n    $el.html(html);\n}\n\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction precisionRound(number, precision) {\n    let factor = Math.pow(10, precision);\n    return Math.round(number * factor) / factor;\n}\n\nfunction getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nlet mod = function (a, b) {\n    return (a % b + b) % b;\n};\n\n// Standard Normal variate using Box-Muller transform.\nlet randomBoxMuller = function () {\n    let u = 0,\n        v = 0;\n    while (u === 0) u = Math.random(); //Converting [0,1) to (0,1)\n    while (v === 0) v = Math.random();\n    return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n};\n\nfunction randomTorusWalk(d, w, h, speed) {\n    let X = [];\n    let V = [];\n    let x = [0.5 * w, 0.5 * h];\n\n    X.push(x.slice());\n    let v = [0.0, 0.0];\n    let theta = 0.0;\n\n    for (let t = 0; t < d; t++) {\n        theta += randomBoxMuller() / 4;\n        v[0] = speed * Math.cos(theta);\n        v[1] = speed * Math.sin(theta);\n        x[0] += v[0];\n        x[1] += v[1];\n        x[0] = mod(x[0], w);\n        x[1] = mod(x[1], h);\n        X.push(x.slice());\n        V.push(v.slice());\n    }\n    return [X, V];\n}\n\nmodule.exports = {\n    loadHtml: loadHtml,\n    getRandomInt: getRandomInt,\n    getRandomArbitrary: getRandomArbitrary,\n    precisionRound: precisionRound,\n    randomTorusWalk: randomTorusWalk\n};\n\n//# sourceURL=webpack:///./src/widgets/utils.js?");

/***/ }),

/***/ 0:
/*!******************************************************************************************************************************************************************************************************************************************!*\
  !*** multi ./src/widgets/input-space/index.js ./src/widgets/input-space/potentialPools.tmpl.html ./src/widgets/input-space/potentialPools.js ./src/widgets/input-space/initialPerms.tmpl.html ./src/widgets/input-space/initialPerms.js ***!
  \******************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ./src/widgets/input-space/index.js */\"./src/widgets/input-space/index.js\");\n__webpack_require__(/*! ./src/widgets/input-space/potentialPools.tmpl.html */\"./src/widgets/input-space/potentialPools.tmpl.html\");\n__webpack_require__(/*! ./src/widgets/input-space/potentialPools.js */\"./src/widgets/input-space/potentialPools.js\");\n__webpack_require__(/*! ./src/widgets/input-space/initialPerms.tmpl.html */\"./src/widgets/input-space/initialPerms.tmpl.html\");\nmodule.exports = __webpack_require__(/*! ./src/widgets/input-space/initialPerms.js */\"./src/widgets/input-space/initialPerms.js\");\n\n\n//# sourceURL=webpack:///multi_./src/widgets/input-space/index.js_./src/widgets/input-space/potentialPools.tmpl.html_./src/widgets/input-space/potentialPools.js_./src/widgets/input-space/initialPerms.tmpl.html_./src/widgets/input-space/initialPerms.js?");

/***/ })

/******/ });